name: Millistream.Streaming

env:
  major: 1
  minor: 2
  patch: 0

on:
  push:
    branches:
      - main
    paths:
     - 'Source/Millistream.Streaming/**'
  workflow_dispatch:

jobs:
  Build:
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup the .NET Core 3.1 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Setup the .NET 5 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.101

    - name: Build on macOS/Linux
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        dotnet build Source/Millistream.Streaming/Millistream.Streaming.csproj -c Release -f netstandard1.2
        dotnet build Tests/Millistream.Streaming.UnitTests/Millistream.Streaming.UnitTests.csproj -c Release -f netcoreapp3.1
        dotnet build Tests/Millistream.Streaming.UnitTests/Millistream.Streaming.UnitTests.csproj -c Release -f net5.0
        dotnet build Tests/Millistream.Streaming.IntegrationTests/Millistream.Streaming.IntegrationTests.csproj -c Release -f netcoreapp3.1
        dotnet build Tests/Millistream.Streaming.IntegrationTests/Millistream.Streaming.IntegrationTests.csproj -c Release -f net5.0

    - name: Build on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      shell: bash
      run: |
        runNumber=$GITHUB_RUN_NUMBER
        revision=$((runNumber-2))
        version="$major.$minor.$revision"
        dotnet build Source/Millistream.Streaming/Millistream.Streaming.csproj -c Release -p:Version=$version
        dotnet build Tests/Millistream.Streaming.UnitTests/Millistream.Streaming.UnitTests.csproj -c Release -p:Version=$version
        dotnet build Tests/Millistream.Streaming.IntegrationTests/Millistream.Streaming.IntegrationTests.csproj -c Release -p:Version=$version

    - name: Run Unit Tests on macOS/Linux
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        dotnet test Tests/Millistream.Streaming.UnitTests/Millistream.Streaming.UnitTests.csproj -c Release -f netcoreapp3.1 --no-build --no-restore
        dotnet test Tests/Millistream.Streaming.UnitTests/Millistream.Streaming.UnitTests.csproj -c Release -f net5.0 --no-build --no-restore

    - name: Run Unit Tests on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        dotnet test Tests/Millistream.Streaming.UnitTests/Millistream.Streaming.UnitTests.csproj -c Release --no-build --no-restore

    - name: Download and Install libmdf on macOS
      if: ${{ matrix.os == 'macOS-latest' }}
      run: |
        curl -O https://packages.millistream.com/macOS/libmdf-1.0.23.pkg 
        sudo installer -pkg libmdf-1.0.23.pkg -target /

    - name: Download and Install libmdf on Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo wget "https://packages.millistream.com/apt/sources.list.d/`lsb_release -cs`.list" -O /etc/apt/sources.list.d/millistream.list 
        wget -q "https://packages.millistream.com/D2FCCE35.gpg" -O- | sudo apt-key add - 
        sudo apt update
        sudo apt-get install libmdf

    - name: Download and Install libmdf on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      shell: powershell
      run: |
        (new-object System.Net.WebClient).DownloadFile('https://packages.millistream.com/Windows/libmdf-1.0.23.exe','libmdf-1.0.23.exe')
        .\libmdf-1.0.23.exe /S

    - name: Set Credentials
      shell: pwsh
      env:
        HOSTNAME: ${{ secrets.HOSTNAME }}
        USERNAME: ${{ secrets.USERNAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
      run: |
        [xml]$doc = Get-Content Tests/Millistream.Streaming.IntegrationTests/TestSettings.runsettings
        $doc.RunSettings.TestRunParameters.ChildNodes.Item(0).value = "$env:HOSTNAME"
        $doc.RunSettings.TestRunParameters.ChildNodes.Item(1).value = "$env:USERNAME"
        $doc.RunSettings.TestRunParameters.ChildNodes.Item(2).value = "$env:PASSWORD"
        $doc.Save("UpdatedTestSettings.runsettings")

    - name: Run Integration Tests on macOS/Linux
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        dotnet test Tests/Millistream.Streaming.IntegrationTests/Millistream.Streaming.IntegrationTests.csproj -c Release -f netcoreapp3.1 --no-build --no-restore -s UpdatedTestSettings.runsettings
        dotnet test Tests/Millistream.Streaming.IntegrationTests/Millistream.Streaming.IntegrationTests.csproj -c Release -f net5.0 --no-build --no-restore -s UpdatedTestSettings.runsettings

    - name: Run Integration Tests on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        dotnet test Tests/Millistream.Streaming.IntegrationTests/Millistream.Streaming.IntegrationTests.csproj -c Release --no-build --no-restore -s UpdatedTestSettings.runsettings

    - name: Remove the .runsettings file
      shell: pwsh
      run: Remove-Item UpdatedTestSettings.runsettings

    - name: Pack
      if: ${{ matrix.os == 'windows-latest' }}
      shell: bash
      run: |
        dotnet pack Source/Millistream.Streaming/Millistream.Streaming.csproj -c Release /property:PackageVersion=$major.$minor.$patch --no-build --no-restore

    - name: Upload Artifact
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-artifact@v2
      with:
        name: Millistream.Streaming
        path: 'Source/Millistream.Streaming/bin/Release/**/*.nupkg'
        if-no-files-found: error